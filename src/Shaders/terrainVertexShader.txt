#version 330 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

const float fogDensity = 0.0000002;
const float fogGradient = 1.5;


void main(void){

    vec4 worldPosition =  transformationMatrix * vec4(position, 1.0);
    vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
    pass_textureCoords = textureCoords;

    surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
    for (int i = 0; i < 4; i++){
                toLightVector[i] = lightPosition[i] - worldPosition.xyz;
        }
    toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;

     float distance = length(positionRelativeToCam.xyz);
     visibility = exp(-pow(( distance * fogDensity  ), fogGradient));
     visibility = clamp(visibility, 0.0, 1.0);


}